---
# exclude packages
- name: write exclude to YUM conf
  lineinfile:
    path: /etc/yum.conf
    line: "exclude={{ '* '.join(packages_to_exclude) }}*"
  when: 'ansible_distribution == "RedHat"'
  tags:
    - patching

# RHEL repos
- name: manage RHEL repos
  block:
  - name: disable RHEL repos
    shell: 'subscription-manager repos --disable=*'
  - name: enable RHEL 7 repos
    shell: 'subscription-manager repos --enable={{item}}'
    with_items: '{{ rhel7_enabled_repos }}'
    when: 'ansible_distribution == "RedHat" and ansible_distribution_major_version is match("7")'
  - name: enable RHEL 8 repos
    shell: 'subscription-manager repos --enable={{item}}'
    with_items: '{{ rhel8_enabled_repos }}'
    when: 'ansible_distribution == "RedHat" and ansible_distribution_major_version is match("8")'
  when: 'ansible_distribution == "RedHat"'
  tags:
    - patching

- name: update RHEL 7 OSs & check whether reboot is required
  block:
    - name: run yum update
      yum:
        name: "*"
        disablerepo: "*"
        enablerepo: "{{ rhel7_enabled_repos }}"
        exclude: "{{ packages_to_exclude }}"
        security: "{{ rhel_security_updates }}"
        state: latest
    - name: Check if a reboot is needed on all RHEL based servers
      command: needs-restarting -r
      register: rhel7_restart_required
      ignore_errors: yes
  when: "ansible_distribution == 'RedHat' and ansible_distribution_major_version is match('7\\S*')"
  tags:
    - patching

- name: update RHEL 8 OSs & check whether reboot is required
  block:
    - name: run yum update
      yum:
        name: "*"
        disablerepo: "*"
        enablerepo: "{{ rhel8_enabled_repos }}"
        exclude: "{{ packages_to_exclude }}"
        security: "{{ rhel_security_updates }}"
        state: latest
    - name: Check if a reboot is needed on all RHEL based servers
      command: needs-restarting -r
      register: rhel8_restart_required
      ignore_errors: yes
  when: "ansible_distribution == 'RedHat' and ansible_distribution_major_version is match('8\\*')"
  tags:
    - patching

- name: update CentOS OS & check wether reboot is required
  block:
    - name: run yum update
      yum:
        name: "*"
        disablerepo: "*"
        enablerepo: "{{ centos_enabled_repos }}"
        exclude: "{{ packages_to_exclude }}"
        state: latest
    - name: Check if a reboot is needed on all CentOS based servers
      command: needs-restarting -r
      register: centos_restart_required
      ignore_errors: yes
  when: "ansible_distribution == 'CentOS'"
  tags:
    - patching

- name: update SUSE OS & check wether reboot is required
  block:
    - name: run zypper update
      zypper:
        name: "*"
        state: latest
    - name: Check if a reboot is needed on all SUSE/OpenSUSE/SLES based servers
      register: suse_reboot_required_file
      stat:
        path: /boot/do_purge_kernels
        get_md5: no
  when: "'SUSE' in ansible_distribution or 'SLES' in ansible_distribution"
  tags:
    - patching

- name: update Ubuntu OS & check wether reboot is required
  block:
    - name: run apt update
      apt:
        upgrade: dist
    - name: Check if a reboot is needed on all Ubuntu based servers
      register: ubuntu_reboot_required_file
      stat:
        path: /var/run/reboot-required
        get_md5: no
  when: "'Ubuntu' in ansible_distribution"
  tags:
    - patching

- debug:
    msg: "{{ suse_reboot_required_file }}"

- name: notify patching stage ended / reboot SUSE/SLES servers if necessary
  shell: "uptime"
  when: "('SUSE' in ansible_distribution or 'SLES' in ansible_distribution) and suse_reboot_required_file.stat.exists"
  notify:
      - reboot
  tags:
      - patching
- name: notify patching stage ended / reboot Ubuntu servers if necessary
  shell: "uptime"
  when: "'Ubuntu' in ansible_distribution and ubuntu_reboot_required_file.stat.exists"
  notify:
      - reboot
  tags:
      - patching
- name: notify patching stage ended / reboot CentOS servers if necessary
  shell: "uptime"
  when: "ansible_distribution == 'CentOS' and centos_restart_required.rc==1"
  notify:
      - reboot
  tags:
      - patching
- name: notify patching stage ended / reboot RHEL servers if necessary
  shell: "uptime"
  when: "ansible_distribution == 'RedHat' and ansible_distribution_major_version is match('7') and rhel7_restart_required.rc==1"
  notify:
      - reboot
  tags:
      - patching
- name: notify patching stage ended / reboot RHEL servers if necessary
  shell: "uptime"
  when: "ansible_distribution == 'RedHat' and ansible_distribution_major_version is match('8') and rhel8_restart_required.rc==1"
  notify:
      - reboot
  tags:
      - patching