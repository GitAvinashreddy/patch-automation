---
### LOGS ###
- name: get timestamp
  block:
    - name: retrieve timestamp
      shell: "echo -e  \"Date is `date | awk '{print $3 \" \" $2 \" \" $6}'` and time is `date | awk '{print $4}'`\""
      register: timestamp
    - name: set fact timestamp
      set_fact:
        results_logs: '{{ results_logs|combine({"timestamp": " ".join(timestamp.stdout_lines)|quote}) }}'
    - name: write timestamp
      debug:
        msg: "{{ timestamp.stdout }}"
  tags:
    - logs
- name: get uptime data
  block:
    - name: retrieve uptime info
      shell: "echo -e   \"Uptime is `uptime | awk '{print $3 \" \" $4}'`\""
      register: uptime
    - name: set fact uptime
      set_fact:
        results_logs: '{{ results_logs|combine({"uptime": " ".join(uptime.stdout_lines)|quote}) }}'
    - name: write uptime info
      debug:
        msg: "{{ uptime.stdout }}"
- name: mounted FS data
  block:
    - name: retrive df file systems data output
      shell: "echo -e  \"Total `df -hP | awk '{print $1 \" \" $6}' | sort | wc -l` FS are mounted\""
      register: df_total
    - name: set fact df
      set_fact:
        results_logs: '{{ results_logs|combine({"df-total": " ".join(df_total.stdout_lines)|quote}) }}'
    - name: write df output
      debug:
        msg: "{{ df_total.stdout }}"
- name: retrieve Mem/CPU info
  block:
    - name: read Mem/CPU data
      shell: "echo -e  \"Total CPU: `cat /proc/cpuinfo  | grep \"processor\" | wc -l` Memory: `cat /proc/meminfo | grep -i memtotal | awk '{print $2}'` kb before recycle\""
      register: cpu_total
    - name: set fact cpu
      set_fact:
        results_logs: '{{ results_logs|combine({"cpu-total": " ".join(cpu_total.stdout_lines)|quote}) }}'
    - name: dump CPU data
      debug:
        msg: "{{ cpu_total.stdout }}"
- name:  log ifcfg network scripts
  block:
    - name: read ifcfg network scripts
      shell: "cat /etc/sysconfig/network-scripts/ifcfg-*"
      ignore_errors: true
      register: ifcfg_net_scripts
    - name: set fact ifcfg net
      set_fact:
        results_logs: '{{ results_logs|combine({"ifcfg_net": " ".join(ifcfg_net_scripts.stdout_lines)|quote}) }}'
    - name: write ufcfg network scripts
      debug:
        msg: "{{ ifcfg_net_scripts.stdout }}"
- name: backup /etc/hosts file
  block:
    - name: read /etc/hosts file
      shell: "cat /etc/hosts"
      register: hosts
    - name: set fact hosts
      set_fact:
        results_logs: '{{ results_logs|combine({"hosts": " ".join(hosts.stdout_lines)|quote}) }}'
    - name: write /etc/hosts backup
      debug:
        msg: "{{ hosts.stdout }}"
- name: retrieve fstab data
  block:
    - name: read /etc/fstab data
      shell: "cat /etc/fstab"
      register: fstab
    - name: set fact fstab
      set_fact:
        results_logs: '{{ results_logs|combine({"fstab": " ".join(fstab.stdout_lines)|quote}) }}'
    - name: write /etc/fstab backup
      debug:
        msg: "{{ fstab.stdout }}"
- name: retrieve lvsdisplay data
  block:
    - name: get lvsdisplay output
      shell: "lvdisplay"
      ignore_errors: true
      register: lvsdisplay
    - name: set fact
      set_fact:
        results_logs: '{{ results_logs|combine({"lvsdisplay": " ".join(lvsdisplay.stdout_lines)|quote}) }}'
    - name: dump lvsdisplay output
      debug:
        msg: "{{ lvsdsiplay.stdout }}"
- name: get ifconfig data
  block:
    - name: retrieve ifconfig output
      shell: "ifconfig -a"
      ignore_errors: true
      register: ifcfg
    - name: set ifconfig fact
      set_fact:
        results_logs: '{{ results_logs|combine({"ifconfig": " ".join(ifcfg.stdout_lines)|quote}) }}'
    - name: write ifconfig data
      debug:
        msg: "{{ ifcfg.stdout_lines }}"
- name: list java processes
  block:
    - name: check Java processes
      shell: "ps -ef | grep java | grep -v \"grep\" | awk NR==1'{print $1}'"
      register: crit_processes
    - name: set critical processes fact
      set_fact:
        results_logs: '{{ results_logs|combine({"java": " ".join(crit_processes)|quote}) }}'
    - name: dump critical java processes to log
      debug:
        msg: "Some critical proccess are running in background. Check ps -ef.\n{{ crit_processes.stdout }}"
      when: "{{ crit_processes.stdout_lines|length!=0 }}"
- name: list warnings and errors /var/log/messages
  block:
    - name: read /var/log/messages
      shell:  "cat /var/log/messages | sed -n -e '/error/p' -e'/warn/p'  | awk NR==1'{print $1}'"
      ignore_errors: true
      register: log_messages_events_error
    - name: set log messages fact
      set_fact:
        results_logs: '{{ results_logs|combine({"log_messages_errors": " ".join(log_messages_events_error.stdout_lines)|quote}) }}'
    - name: count /var/log/messages errors and warnings
      shell: "cat /var/log/messages | sed -n -e '/error/p' -e'/warn/p'|wc -l"
      ignore_errors: true
      register: var_log_errors_and_warnings_num
    - name: write crtitical alerts log message
      debug:
        msg: "{{ var_log_errors_and_warnings_num.stdout }} critical error/warning messages found."
    - name: write crtitical alerts log message
      debug:
        msg: "{{ log_messages_events_error.stdout }}"
- name: read dmesg errors and warnings
  block:
    - name: verify errors/warnings presence in /var/log/dmesg
      shell: "cat /var/log/dmesg | sed -n -e '/error/p' -e'/warn/p'  | awk NR==1'{print $1}'"
      register: log_dmesg_crit_events
    - name: set fact log dmesg
      set_fact:
        results_logs: '{{ results_logs|combine({"dmesg": " ".join(log_dmesg_crit_events.stdout_lines)|quote}) }}'
    - name: log critical alerts
      debug:
        msg: "{{ ' '.join(log_dmesg_crit_events.stdout_lines) }}"
      when: log_dmesg_crit_events.stdout_lines|length!=0
    - name: log absence critical alerts
      debug:
        msg: "No critical alerts found in /var/log/dmesg"
      when: log_dmesg_crit_events.stdout_lines|length==0
- name: write logs collection finished
  debug:
    msg: "###################################### PRECHECK LOGS COLLECTED  #########################################################"
